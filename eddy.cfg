# The MCU section only applies to the Eddy USB. For Eddy Coil you will use the MCU name of the toolboard that you connected the Eddy Coil to.
[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_5044340310A9D51C-if00
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 100

[probe_eddy btt_eddy]
sensor_type: ldc1612
reg_drive_current: 15
# number of samples to fetch per second
samples_per_second: 1000
# how much weight to give most recent sample with exponential moving average scheme (0 to disable)
#exp_moving_average_weight: 0.25
exp_moving_average_weight: 0
i2c_mcu: eddy
i2c_bus: i2c0f
x_offset: -18
y_offset: 16

#[probe_eddy_current btt_eddy]
#sensor_type: ldc1612
#reg_drive_current: 19
## this is the z endstop trigger height; it is not the z offset between nozzle and probe
#z_offset: 2.5
##i2c_address:
#i2c_mcu: eddy
#i2c_bus: i2c0f
## Measure the offsets below using the method described here: https://www.klipper3d.org/Probe_Calibrate.html#calibrating-probe-x-and-y-offsets
## From Rappetor's page (v3 mount)
##x_offset: -16.0
##y_offset: 11.5
## valerie's mount
#x_offset: -18
#y_offset: 16
##tap_height: 2.0
#samples: 5
#samples_tolerance: 0.01

[bed_mesh]
horizontal_move_z: 2
speed: 200
# mesh min x,y = bed_min_x + max(15, min(x_offs, 0)) , bed_min_y + max(15, min(y_offs, 0))
# mesh max x,y = bed_max_x - max(15, abs(x_offs)) , bed_max_y - max(15, abs(y_offs)) - fudge for scan overshoot
##mesh_min: 15, 15
##mesh_max: 334, 333
mesh_min: 20, 20
mesh_max: 330, 330
# extra x-axis movement to smooth out moves
scan_overshoot: 5
probe_count: 15, 15  # too dense a mesh is bad with rapid scan due to noise from the probe
algorithm: bicubic
bicubic_tension: 0.5
split_delta_z: 0.0125
# interpolate 3 points per probed point
mesh_pps: 3,3
adaptive_margin: 5
# layers to start fading out Z adjustment and to end it, with a target of 0
fade_start: 1
fade_end: 10
fade_target: 0

# This section is only relevant for Eddy USB. Comment it out for Eddy Coil.
[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
horizontal_move_z: 2

# Uncomment this if you are using Eddy as the probe AND the homing endstop
##[safe_z_home]
#home_xy_position: 175, 175 # Choose an X,Y position that is in the center of your bed. For a 300x300 machine that will be 150, 150. Use the same principle to calculate your bed center.
# this came from original sovol [z_offset_calibration]
##home_xy_position: 191,165      
##z_hop: 10
##z_hop_speed: 25
##speed: 200

###############################Macros and related################################
#This secton contains macros and related config sections. Some should be used, others are optional. Read the comment above each one to find out whether or not to uncomment it for your installation.

[gcode_macro HACK]
gcode:
  SET_KINEMATIC_POSITION X=177.50 Y=177.50 Z=10
#  G28 Z

# Uncomment this if you are using Eddy as the probe AND the homing endstop
# Take note of the lines that should only be used if you have a KNOMI installed.
#[gcode_macro G28]
#rename_existing: G28.1
#gcode:
#  STATUS_HOMING
#  # Do the initial home. This seems to hit an innacurate Z position.
#  G28.1 {rawparams}
#  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
#    PROBE
#    SET_Z_FROM_PROBE
#  {% endif %}
#  STATUS_READY

##[gcode_macro SET_Z_FROM_PROBE]
##gcode:
##    #{% set probe_z_trigger = printer.configfile.settings['probe_eddy_current btt_eddy'].z_offset %}
##    {% set probe_z_trigger = printer.probe.home_trigger_z %}
##    {% set probe_z_actual = printer.probe.last_z_result %}
##    G90 # absolute coordinates
##    # Move the Z axis to the physical axis point at which the probe recorded it hit its trigger
##    G1 Z{probe_z_actual} F180
##    M400 # finish moves
##    G4 S1 # dwell for 1 sec
##    # This physical position is probe_z_trigger (i.e. 2.5)
##    SET_KINEMATIC_POSITION Z={probe_z_trigger}
##    # hop back up
##    G1 Z5 F180

# This assumes the toolhead hasn't moved from the final PROBE position
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set probe_z_actual = printer.probe.last_z_result %}
    RESPOND TYPE=echo MSG="Set Z={probe_z_actual}"
    SET_KINEMATIC_POSITION Z={probe_z_actual}
    G90 # absolute coordinates
    #G1 Z5 F180

#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BTT_BED_MESH_CALIBRATE
#gcode:
#  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg
#  BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
#  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg
